// SPDX-License-Identifier: MIT

/// @notice Add two uint256 from calldata together
/// @dev Revert if overflow
#define macro MATH__ADD(empty_revert) = takes(0) returns (1) {
	// Load our numbers from calldata,
	// Do some switcharoo so we can compare
	// a against a+b, if a is greater, empty revert
	0x04 calldataload 0x24 calldataload  // [b, a]
	dup2 add                             // [a+b, a]
	dup1 swap2 gt                        // [(a > a+b), a+b]
	empty_revert jumpi                   // jump to fail if a greater than (a+b)

	// Return our new number.
	0x00 mstore // Store our number in memory.
	0x20 0x00 return // Return it.
}

/// @notice Subtract two uint256 from calldata together
/// @dev Revert if underflow
#define macro MATH__SUB(empty_revert) = takes(0) returns (1) {
	// Load our numbers from calldata,
	// Do some switcharoo so we can compare
	// a against a-b, if a is less, empty revert
	0x04 calldataload 0x24 calldataload  // [b, a]
	dup2 sub                             // [a-b, a]
	dup1 swap2 lt                        // [(a < a-b), a-b]
	empty_revert jumpi                   // jump to fail if a less than (a-b)

	// Return a number from the stack.
	0x00 mstore // Store our number in memory.
	0x20 0x00 return // Return it.
}

/// @notice Multiply two uint256 from calldata together
/// @dev Revert if overflow
#define macro MATH__MUL(empty_revert) = takes(0) returns (1) {
	0x04 calldataload 0x24 calldataload  // [b,a]
	0x00 dup2 dup4 0x00 eq               // [(0==a),b,0,b,a]
	empty_revert jumpi                   // Jump to fail if a == 0 [b,0,b,a]
	eq                                   // [(b==0),b,a]
	empty_revert jumpi                   // Jump to fail if b == 0 [b,a]
	dup2 dup2 mul                        // [(b*a),b,a]

	// Final check: (a*b) / b = a
	swap2 dup3 div eq                    // [((b*a)/a)==b,(b*a)]
	iszero empty_revert jumpi            // Jump to fail if (b*a) / a != b. else: [(b*a)]

	// Return our new number.
	0x00 mstore // Store our number in memory.
	0x20 0x00 return // Return it.
}

/// @notice Divide two uint256 from calldata together
/// @dev Revert if either value is zero or if result is malformed
#define macro MATH__DIV(empty_revert) = takes(0) returns (1) {
	0x04 calldataload 0x24 calldataload  // [b,a]
	0x00 dup2 dup4 0x00 eq               // [(0==a),b,0,b,a]
	empty_revert jumpi                   // Jump to fail if a == 0 [b,0,b,a]
	eq                                   // [(b==0),b,a]
	empty_revert jumpi                   // Jump to fail if b == 0 [b,a]
	dup2 dup2 swap1 div                  // [(a/b),b,a]
	swap2 swap1 dup3                     // [(a/b),b,a,(a/b)]
	mul eq iszero empty_revert jumpi     // fail if (a/b) * b != a. else [(a/b)]

	// Return our new number.
	0x00 mstore // Store our number in memory.
	0x20 0x00 return // Return it.
}

/// @notice mod two numbers
/// @dev Revert if b==0
#define macro MATH__MOD(empty_revert) = takes(0) returns (1) {
	0x04 calldataload 0x24 calldataload  // [b,a]
	0x00 dup2 eq                         // [(b==0),b,a]
	empty_revert jumpi                   // fail if b==0. else [b,a]
	swap1 mod                            // [(a mod b)]

	// Return our new number.
	0x00 mstore // Store our number in memory.
	0x20 0x00 return // Return it.
}

/// @notice Determine which function is being called
#define macro FUNCTION_SIG(math_add, math_sub, math_mul, math_div, math_mod) = takes(0) returns (1) {
	0x00 calldataload 0xE0 shr // function signature
	dup1 0x771602f7 eq math_add jumpi
	dup1 0xb67d77c5 eq math_sub jumpi
	dup1 0xc8a4ac9c eq math_mul jumpi
	dup1 0xa391c15b eq math_div jumpi
	dup1 0xf43f523a eq math_mod jumpi
}

#define macro MAIN() = takes(0) returns(0) {

	FUNCTION_SIG(math_add, math_sub, math_mul, math_div, math_mod)

	math_add:
		MATH__ADD(empty_revert)

	math_sub:
		MATH__SUB(empty_revert)

	math_mul:
		MATH__MUL(empty_revert)
	
	math_div:
		MATH__DIV(empty_revert)

	math_mod:
		MATH__MOD(empty_revert)
	
	empty_revert:
		0x00 0x00 revert

}